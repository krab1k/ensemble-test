#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#run script for an experiment with ensemble
import os
import random
import re
import shutil
import subprocess
import sys
import tempfile
from argparse import ArgumentParser
from os import listdir
import numpy as np
import pathlib
import logging
from time import localtime, strftime
from comparison import compare_ensembles

class SpecialFormatter(logging.Formatter):
    FORMATS = {logging.DEBUG : logging._STYLES['{'][0]("DEBUG: {message}"),
           logging.ERROR : logging._STYLES['{'][0]("{module} : {lineno}: {message}"),
           logging.INFO : logging._STYLES['{'][0]("{message}"),
           'DEFAULT' : logging._STYLES['{'][0](" {message}")}
    def format(self, record):
        # Ugly. Should be better
        self._style = self.FORMATS.get(record.levelno, self.FORMATS['DEFAULT'])
        return logging.Formatter.format(self, record)

def get_argument():
    parser = ArgumentParser()
    parser.add_argument("-n", type=int, dest="n_value", default=1, help="n")
    parser.add_argument("-k", type=int, dest="k_value", default=1, help="k")
    parser.add_argument("-r", type=int, dest="repeat", default=1, help="repetition")
    parser.add_argument("--tolerance", type=float, dest="tolerance",
                        help="pessimist (0) or optimist (0 < x <1) result",
                        default=0)
    parser.add_argument("-d", "--dir", dest="mydirvariable",
                        help="Choose dir", metavar="DIR", required=True)
    parser.add_argument("--verbose", help="increase output verbosity",
                        action="store_true")
    parser.add_argument("--preserve", help="preserve temporary directory",
                        action="store_true")
    parser.add_argument("--output", help="choose directory to save output",
                        metavar="DIR", dest="output")
    return parser.parse_args()

def run_script(method, args, path):
    print(args)
    call = subprocess.run([f'./ensemble.py', '-d', f'{args.mydirvariable}', '-n', f'{args.n_value}', '-k',
                           f'{args.k_value}', '--tolerance',f' {args.tolerance}', '--verbose',
                           '--method',f'{method}', '--preserve','--output',
                           f'{path}','-r',f'{args.repeat}'])
                #print(call)
    if call.returncode:
        print(f'ERROR: script failed', file=sys.stderr)
        #logging.ERROR(f'Script failed.')
        sys.exit(1)

def work_with_result(path, method):
    rmsd = []
    #method = []
    chi2 = []
    files = listdir(path)
    for line in files:
        with open(path + '/' + line) as file:
            for line in file:
                if line.startswith('*****FINAL RMSD'):
                    rmsd.append(line.split('|')[1])
                    chi2.append(line.split('|')[2])
                #if line.startswith('#Method:'):
                #    method.append((line.split(': ')[1]).rstrip())
    result_file = list(zip(method,rmsd,chi2))
    for method,rmsd,chi2 in result_file:
        logging.info(f'{method} || {rmsd} || {chi2}')

def main():
    args = get_argument()
    #os.chdir(args.mydirvariable)
    datum = strftime("%Y-%m-%d__%H-%M-%S", localtime())
    path = f'{args.output}/results/result_{datum}'
    pathlib.Path(path).mkdir(parents=True, exist_ok=True)
    method_list = ['eom', 'multifoxs']
    print(*method_list)
    hdlr = logging.FileHandler(f'{args.output}/results/result_{datum}/final_result_n{args.n_value}_k{args.k_value}_{strftime("%Y-%m-%d__%H-%M-%S", localtime())}.log')
    hdlr.setFormatter(SpecialFormatter())
    logging.root.addHandler(hdlr)
    logging.root.setLevel(logging.INFO)
    logging.root.setLevel(logging.DEBUG)
    logging.info(f'***Output from script*** {strftime("%Y-%m-%d__%H-%M-%S", localtime())} \n')
    logging.info(f'#Total files | {args.n_value} \n')
    logging.info(f'#Selected files | {args.k_value} \n')
    logging.info('Results for methods')

    for method in method_list:
        run_script(method, args, path)
    work_with_result(path, method_list)
if __name__ == '__main__':
    main()