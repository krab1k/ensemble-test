#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# run script for an experiment with ensemble
import os
import subprocess
import sys
from argparse import ArgumentParser
from os import listdir
import pathlib
import logging
from time import localtime, strftime
import pkgutil
from multiprocessing import Pool
import configparser
from saxs_experiment import run_method

class SpecialFormatter(logging.Formatter):
    FORMATS = {logging.DEBUG: logging._STYLES['{'][0]("DEBUG: {message}"),
               logging.ERROR: logging._STYLES['{'][0]("{module} : {lineno}: {message}"),
               logging.INFO: logging._STYLES['{'][0]("{message}"),
               'DEFAULT': logging._STYLES['{'][0](" {message}")}

    def format(self, record):
        # Ugly. Should be better
        self._style = self.FORMATS.get(record.levelno, self.FORMATS['DEFAULT'])
        return logging.Formatter.format(self, record)


def get_argument():
    parser = ArgumentParser()
    parser.add_argument("-n", type=int, dest="n_value", default=1, help="n")
    parser.add_argument("-k", type=int, dest="k_value", default=1, help="k")
    parser.add_argument("-r", type=int, dest="repeat", default=1, help="repetition")
    parser.add_argument("--tolerance", type=float, dest="tolerance",
                        help="pessimist (0) or optimist (0 < x <1) result",
                        default=0)
    parser.add_argument("-d", "--dir", dest="mydirvariable",
                        help="Choose dir", metavar="DIR", required=True)
    parser.add_argument("--verbose", type=int,
                        help="increase output verbosity, value 0, 1, 2, 3",
                        default=0)

    parser.add_argument("--verbose_logfile", help="increase output verbosity",
                        action="store_true")

    parser.add_argument("--preserve", help="preserve temporary directory",
                        action="store_true")
    parser.add_argument("--output", help="choose directory to save output",
                        metavar="DIR", dest="output", required=True)

    parser.add_argument("--experimentdata", help="choose file for adderror",
                        metavar="DIR", dest="experimentdata", required=True)

    return parser.parse_args()


def run_script(method, args, path, verbose_logfile, verbose):
    if verbose_logfile:
        call = subprocess.run([f'./saxs_experiment.py', '-d', f'{args.mydirvariable}', '-n', f'{args.n_value}', '-k',
                               f'{args.k_value}', '--tolerance', f' {args.tolerance}'
                               , '--preserve', '--output', f'{path}', '-r', f'{args.repeat}',
                               '--verbose_logfile', '--verbose', f'{verbose}', '--experimentdata',
                               f'{args.experimentdata}','--method', f'{method}'])

    else:
        call = subprocess.run([f'./saxs_experiment.py', '-d', f'{args.mydirvariable}', '-n', f'{args.n_value}', '-k',
                               f'{args.k_value}', '--tolerance', f' {args.tolerance}', '--verbose', f'{verbose}',
                                '--preserve', '--output',
                               f'{path}', '-r', f'{args.repeat}', '--experimentdata', f'{args.experimentdata}',
                               '--method', f'{method}'])
    if call.returncode:
        print(f'ERROR: run_script failed', file=sys.stderr)
        sys.exit(1)

def check_binary():
    print(os.getcwd() + '/config.ini')
    if os.path.exists(os.getcwd() + '/config.ini'):
        print('exist')
        return True
    else: print('Config file does not exist!')
    return False



def work_with_result(path, method):
    rmsd = []
    std = []
    files = listdir(path)
    for line in files:
        with open(path + '/' + line) as file:
            for line in file:
                if line.startswith('*****FINAL RMSD'):
                    rmsd.append(line.split('|')[1])
                    std.append(line.split('|')[2])

    result_file = list(zip(method, rmsd, std))
    for method, rmsd, std in result_file:
        logging.info('{} , {:.3f} , {:.3f}'.format(method, float(rmsd), float(std)))

def get_saxs_methods(config):
    return list(m.name for m in pkgutil.iter_modules([config['SOURCE_METHODS']['path']]))

def main():
    config = configparser.ConfigParser()
    config.read(os.getcwd() + '/config.ini')

    if not check_binary():
        sys.exit(1)
    methods = get_saxs_methods(config)
    #methods = config.sections()
    for method in config.sections():
        pass
        #print(method)
        #print(config[method]['value'])
        #print(f'[\'{method}\'][\'value\']')
        #a='[\'{method}\'][\'value\']'

    print(methods)
    args = get_argument()
    datum = strftime("%Y-%m-%d__%H-%M-%S", localtime())
    path = f'{args.output}/results/result_{datum}'
    pathlib.Path(path).mkdir(parents=True, exist_ok=True)
    #method_list = ['eom', 'multifoxs', 'mes']
    hdlr = logging.FileHandler(
        f'{args.output}/results/result_{datum}/final_result_n{args.n_value}_k{args.k_value}_{strftime("%Y-%m-%d__%H-%M-%S", localtime())}.log')
    hdlr.setFormatter(SpecialFormatter())
    logging.root.addHandler(hdlr)
    logging.root.setLevel(logging.INFO)
    logging.root.setLevel(logging.DEBUG)
    logging.info(f'***Output from script*** {strftime("%Y-%m-%d__%H-%M-%S", localtime())} \n')
    logging.info(f'#Total files : {args.n_value} \n')
    logging.info(f'#Selected files : {args.k_value} \n')
    logging.info(f'#Number of repetition: {args.repeat} \n')
    os.path.abspath(args.mydirvariable)
    logging.info(f'Directory with structures: {os.path.abspath(args.mydirvariable)}')
    logging.info('Method, RMSD, std')
    for method in methods:
        #run_script(method, args, path, args.verbose_logfile, args.verbose)
        run_method(args)   
    work_with_result(path, methods)


if __name__ == '__main__':
    main()
